---
layout:     post
title:      "Сюрпризы c case-insensitive файловыми системами"
date:       2019-11-22 23:37
categories: Ruby
---

Недавно я столкнулся с интересной проблемой и получил еще один ценный урок.
Проблема была связана с особенностью файловой системы MacOS, которая по
умолчанию _case-insensitive_ (как и в Windows). И комбинация MacOS с Git
у нас в проекте привела к неожиданным сложностям.

### Case-insensitive файловая система на практике

Имя файла может включать буквы как в верхнем регистре так и в нижнем,
т.е. регистр сохраняется. Но внутри файловой системы регистр букв в
имени и пути файла не учитывается, т.е. можно обратиться к файлу `about.md`
и как к `About.md` и `ABout.md` и `ABOut.md`.

```shell
$ ls -la about.md
-rw-r--r--  1 andrykonchin  staff  442 Nov  4 23:36 about.md
$ ls -la About.md
-rw-r--r--  1 andrykonchin  staff  442 Nov  4 23:36 About.md
$ ls -la ABout.md
-rw-r--r--  1 andrykonchin  staff  442 Nov  4 23:36 ABout.md
$ ls -la ABOut.md
-rw-r--r--  1 andrykonchin  staff  442 Nov  4 23:36 ABOut.md
```

Если в директории есть два файла, у которых имена отличаются только
регистром букв, то в MacOS только один из файлов будет доступен. А вот
две такие директории просто сольются в одну.

### Git и case-insensitivity

В Git для поддержки _case-insensitive_ файловых систем есть
конфигурационная опция `core.ignoreCase`. Если она включена, то Git
будет игнорировать регистр букв в именах и путях файлов при сравнении.

Например, если переименовать файл `Gemfile` в `gemfile`, то Git не
посчитает это изменением.

```shell
$ mv Gemfile gemfile
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

А если отредактировать файл и посмотреть статус репозитория, то Git
выведет, что изменился файл `Gemfile`. То есть выведет имя файла до
переименования, которое все еще хранится в Git-репозитории.

```shell
$ echo foo > gemfile
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
    modified:   Gemfile

no changes added to commit (use "git add" and/or "git commit -a")
```

### И в чем же здесь проблема?

Один из способов наступить на грабли - это создать и закоммитить в Git
на Linux (где обычно файловые системы _case-sensitive_) два файла, имена
которых отличаются только регистром букв. На MacOS будет виден только
один из них.

Есть и более изощренный вариант. На MacOS отредактировать и затем
переименовать файл изменив только регистр букв и закоммитить в Git. Если
опция Git `core.ignoreCase` отключена, то локально будет видна только
последняя отредактированная версия файла, а в Git буде будут закоммичены
оба файла. Если кто-то на Linux заберет эти обновления из Git, то у него
будет два разных файла. Если заберет кто-то на MacOS, то у него будет
виден только один из файлов. Порядок затирания файлов зависит только от
Git, ведь именно он создает _working directory_ и копирует туда файлы из
служебной директории `.git`.

### Возможные решения

Очевидные следующие варианты:
* всем разработчикам в проекте использовать _case-sensitive_ файловые системы (что сразу исключает Windows)
* всем разработчикам на _case-insensitive_ файловых системах убедиться, что Git опция `core.ignoreCase` включена
* ничего не менять локально но на CI сервере проверять дубликаты файлов

Последний пункт несложно выполнить в *-nix системах. С этим справится простой однострочник в _shell_:

```shell
git ls-tree -r -t --name-only HEAD . | sort -f | uniq -i -d
```

В результате мы получим список файлов-дубликатов.

Если на CI используется Linux (с _case-insensitive_ файловой системой), можно заменить команду `git` на обычный `find`:

```shell
find . -type f | sort -f | uniq -i -d
```

На самом деле от Windows тоже можно добиться поддержки
_case-sensitive_ поведения. В Windows 10 появилась подсистема Windows
Subsystem for Linux (WSL) и теперь можно сделать конкретную директорию
_case-sensitive_ с помощью штатной утилиты `fsutil`.

### Как мы наткнулись на эти грабли

Мы столкнулись с этой проблемой совершенно случайно. В проекте на CI
сервере внезапно начал падать _unit_-тест. Локально у разработчика он
стабильно проходил, а на CI стабильно падал.

Когда начали разбираться, оказалось, что у нас в Git-репозитории
задублировался файлик с данными, которые использовались в тесте. Это
была кассета для _gem_'а VCR в которой были записаны HTTP-запросы/ответы.
Файл генерировался автоматически, а имя и путь формировалось на основе
названия _test case_'а в RSpec. Кто-то переименовал _test case_ изменив
только регистр букв и сгенерировался новый файл.

Например если изменить название с

```ruby
describe "Domestic services" do
  it "returns a rate and services"
end
```

на

```ruby
describe "domestic services" do
  it "returns a rate and services"
end
```

то получим два разных пути:
- `vcr_rspec/.../Domestic_services/returns_a_rate_and_services.yml`
- `vcr_rspec/.../domestic_services/returns_a_rate_and_services.yml`

Так как разработчик использовал MacOS, один из файлов перезатер другой и
тест локально проходил успешно. Но в Git в итоге были закоммичены оба
файла.

На CI использовалась Ubuntu и в директории лежали оба файла. В тесте
читался не актуальный файл и как следствие новый тест падал. Тест мы
пофиксили удалив из репозитория файл-дубликат. Но проблема осталась.
Очень скоро в Git-репозитории у нас появилось уже 20 таких файлов
дубликатов.

### Какие можно сделать выводы?

Разрешите немного покапитанить и сказать очевидные вещи:
- Вы избежите целого класса проблем если среда разработки (операционная
  система, файловая система, версии системных библиотек итд) будет
  максимально близка к среде запуска (_production_, тестовый или CI сервер)
- Если эти среды различаются, важно понимать как и в чем
- И всегда надо помнить, что эти различия рано или поздно выстрелят


### Полезные ссылки

- <https://git-scm.com/docs/git-ls-tree>
- <https://habr.com/ru/company/kaspersky/blog/414239/>
- <https://coderwall.com/p/mgi8ja/case-sensitive-git-in-mac-os-x-like-a-pro>


[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com
